module testingModule;


import cz.muni.fi.sbapr.debs2014.annotation.*;
import cz.muni.fi.sbapr.debs2014.event.*;
import cz.muni.fi.sbapr.debs2014.subscriber.*;
import cz.muni.fi.sbapr.debs2014.listener.*;




//      Contexts
    @Name('SegmentedByHouse')
    create context SegmentedByHouse partition by houseId from SensorEvent;

    @Name('SegmentedByHousehold')
    create context SegmentedByHousehold partition by houseId and householdId from SensorEvent;

    @Name('SegmentedByPlug')
    create context SegmentedByPlug partition by houseId and householdId and plugId from SensorEvent;


//      Streams    
    @Name('RuntimeStream')
    select current_timestamp() as runtime
    from pattern [every timer:interval(1 sec)];
    
    @Name('SensorEventStream')
    select * from SensorEvent;
    
    @Name('LoadStream')
    insert into LoadStream
    select * from SensorEvent(property = true);


//      Windows
    @Name('HourWindow')
    create window HourWindow.win:time(1 min) as SensorEvent;
    insert into HourWindow select * from LoadStream;
      
    @Name('LoadAverageStream')
    insert into LoadAverageStream (loadAverage)
    select avg(value) as loadAverage from HourWindow
    ;  




    //  - into the stream and than the last part having avg(value) > loadAverage

    //      Solution #1.0 (segmented, with having clause)
    //      -   segmented -> must use SensorEvent
    //      -   cannot use having clause with loadAverage      
    //  Input   : SensorEvent event
    //  Output 	: Load median for coresponding plug in respect to TimeWindow
    @Name('OverPlugStatement-NOTACTIVE1.0')
    context SegmentedByPlug
    select
        context.key3 as plug
    ,   context.key2 as household
    ,   context.key1 as house
    ,   avg(value) as plugLoadAverage
    ,   loadAverage
    from        
        SensorEvent(property = true).win:time(1 min)
    ,   LoadAverageStream.std:lastevent()
    having 
        avg(value) > loadAverage
    ;

    //      Solution #1.1 (segmented, with having clause)
    //      -   segmented -> must use SensorEvent           
    @Name('PlugAverageStatement-NOTACTIVE1.1')
    context SegmentedByPlug
    select
        context.key3 as plug
    ,   context.key2 as household
    ,   context.key1 as house   
    ,   avg(value) as plugLoadAverage
    from        
        SensorEvent(property = true).win:time(1 min)
        .std:unique(houseId, householdId, plugId) as Wind
    ,   LoadAverageStream.std:lastevent()    
    having 
        avg(value) > loadAverage
    output 
        snapshot every 1 events
    ;

    //      Solution #2.0 (non-segmented, cannot have having clause)
    //      -   non-segmented -> dont have to use SensorEvent
    //      -   group by restricts select, having clause
    @Name('PlugAverageStatement')
    select
        plugId as plug
    ,   householdId as household
    ,   houseId as house
    ,   median(value) as plugLoadAverage
    from  
        HourWindow
        //SensorEvent(property = true).win:time(1 min)
        //.std:unique(houseId, householdId, plugId) as Wind    
    group by
        plugId
    ,   householdId
    ,   houseId    
    output 
        snapshot every 1 events
    ;   
